!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/brooks/Documents/Tutorials/c_prog/crafting_interpreters/bytecode_vm/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
BINARY_OP	src/vm.c	/^#define BINARY_OP(/;"	d	file:
Chunk	src/include/chunk.h	/^} Chunk;$/;"	t	typeref:struct:__anon166db71e0208
DEBUG_TRACE_EXECUTION	src/include/common.h	/^#define DEBUG_TRACE_EXECUTION$/;"	d
FREE_ARRAY	src/include/memory.h	/^#define FREE_ARRAY(/;"	d
GROW_ARRAY	src/include/memory.h	/^#define GROW_ARRAY(/;"	d
GROW_CAPACITY	src/include/memory.h	/^#define GROW_CAPACITY(/;"	d
INTERPRET_COMPILE_ERROR	src/include/vm.h	/^    INTERPRET_COMPILE_ERROR,$/;"	e	enum:__anon7d047e080203
INTERPRET_OK	src/include/vm.h	/^    INTERPRET_OK,$/;"	e	enum:__anon7d047e080203
INTERPRET_RUNTIME_ERROR	src/include/vm.h	/^    INTERPRET_RUNTIME_ERROR$/;"	e	enum:__anon7d047e080203
InterpretResult	src/include/vm.h	/^} InterpretResult;$/;"	t	typeref:enum:__anon7d047e080203
OP_ADD	src/include/chunk.h	/^    OP_ADD,$/;"	e	enum:__anon166db71e0103
OP_CONSTANT	src/include/chunk.h	/^    OP_CONSTANT,$/;"	e	enum:__anon166db71e0103
OP_DIVIDE	src/include/chunk.h	/^    OP_DIVIDE,$/;"	e	enum:__anon166db71e0103
OP_MULTIPLY	src/include/chunk.h	/^    OP_MULTIPLY,$/;"	e	enum:__anon166db71e0103
OP_NEGATE	src/include/chunk.h	/^    OP_NEGATE,$/;"	e	enum:__anon166db71e0103
OP_RETURN	src/include/chunk.h	/^    OP_RETURN,$/;"	e	enum:__anon166db71e0103
OP_SUBTRACT	src/include/chunk.h	/^    OP_SUBTRACT,$/;"	e	enum:__anon166db71e0103
OpCode	src/include/chunk.h	/^} OpCode;$/;"	t	typeref:enum:__anon166db71e0103
READ_BYTE	src/vm.c	/^#define READ_BYTE(/;"	d	file:
READ_CONSTANT	src/vm.c	/^#define READ_CONSTANT(/;"	d	file:
STACK_MAX	src/include/vm.h	/^#define STACK_MAX /;"	d
Scanner	src/scanner.c	/^} Scanner;$/;"	t	typeref:struct:__anon169b52370108	file:
TOKEN_AND	src/include/scanner.h	/^    TOKEN_AND, TOKEN_CLASS, TOKEN_ELSE, TOKEN_FALSE,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_BANG	src/include/scanner.h	/^    TOKEN_BANG, TOKEN_BANG_EQUAL,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_BANG_EQUAL	src/include/scanner.h	/^    TOKEN_BANG, TOKEN_BANG_EQUAL,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_CLASS	src/include/scanner.h	/^    TOKEN_AND, TOKEN_CLASS, TOKEN_ELSE, TOKEN_FALSE,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_COMMA	src/include/scanner.h	/^    TOKEN_COMMA, TOKEN_DOT, TOKEN_MINUS, TOKEN_PLUS,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_DOT	src/include/scanner.h	/^    TOKEN_COMMA, TOKEN_DOT, TOKEN_MINUS, TOKEN_PLUS,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_ELSE	src/include/scanner.h	/^    TOKEN_AND, TOKEN_CLASS, TOKEN_ELSE, TOKEN_FALSE,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_EOF	src/include/scanner.h	/^    TOKEN_ERROR, TOKEN_EOF$/;"	e	enum:__anon0ffdc26f0103
TOKEN_EQUAL	src/include/scanner.h	/^    TOKEN_EQUAL, TOKEN_EQUAL_EQUAL,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_EQUAL_EQUAL	src/include/scanner.h	/^    TOKEN_EQUAL, TOKEN_EQUAL_EQUAL,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_ERROR	src/include/scanner.h	/^    TOKEN_ERROR, TOKEN_EOF$/;"	e	enum:__anon0ffdc26f0103
TOKEN_FALSE	src/include/scanner.h	/^    TOKEN_AND, TOKEN_CLASS, TOKEN_ELSE, TOKEN_FALSE,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_FOR	src/include/scanner.h	/^    TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_FUN	src/include/scanner.h	/^    TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_GREATER	src/include/scanner.h	/^    TOKEN_GREATER, TOKEN_GREATER_EQUAL,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_GREATER_EQUAL	src/include/scanner.h	/^    TOKEN_GREATER, TOKEN_GREATER_EQUAL,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_IDENTIFIER	src/include/scanner.h	/^    TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_NUMBER,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_IF	src/include/scanner.h	/^    TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_LEFT_BRACE	src/include/scanner.h	/^    TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_LEFT_PAREN	src/include/scanner.h	/^    TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_LESS	src/include/scanner.h	/^    TOKEN_LESS, TOKEN_LESS_EQUAL,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_LESS_EQUAL	src/include/scanner.h	/^    TOKEN_LESS, TOKEN_LESS_EQUAL,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_MINUS	src/include/scanner.h	/^    TOKEN_COMMA, TOKEN_DOT, TOKEN_MINUS, TOKEN_PLUS,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_NIL	src/include/scanner.h	/^    TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_NUMBER	src/include/scanner.h	/^    TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_NUMBER,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_OR	src/include/scanner.h	/^    TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_PLUS	src/include/scanner.h	/^    TOKEN_COMMA, TOKEN_DOT, TOKEN_MINUS, TOKEN_PLUS,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_PRINT	src/include/scanner.h	/^    TOKEN_PRINT, TOKEN_RETURN, TOKEN_SUPER, TOKEN_THIS,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_RETURN	src/include/scanner.h	/^    TOKEN_PRINT, TOKEN_RETURN, TOKEN_SUPER, TOKEN_THIS,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_RIGHT_BRACE	src/include/scanner.h	/^    TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_RIGHT_PAREN	src/include/scanner.h	/^    TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_SEMICOLON	src/include/scanner.h	/^    TOKEN_SEMICOLON, TOKEN_SLASH, TOKEN_STAR,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_SLASH	src/include/scanner.h	/^    TOKEN_SEMICOLON, TOKEN_SLASH, TOKEN_STAR,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_STAR	src/include/scanner.h	/^    TOKEN_SEMICOLON, TOKEN_SLASH, TOKEN_STAR,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_STRING	src/include/scanner.h	/^    TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_NUMBER,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_SUPER	src/include/scanner.h	/^    TOKEN_PRINT, TOKEN_RETURN, TOKEN_SUPER, TOKEN_THIS,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_THIS	src/include/scanner.h	/^    TOKEN_PRINT, TOKEN_RETURN, TOKEN_SUPER, TOKEN_THIS,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_TRUE	src/include/scanner.h	/^    TOKEN_TRUE, TOKEN_VAR, TOKEN_WHILE,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_VAR	src/include/scanner.h	/^    TOKEN_TRUE, TOKEN_VAR, TOKEN_WHILE,$/;"	e	enum:__anon0ffdc26f0103
TOKEN_WHILE	src/include/scanner.h	/^    TOKEN_TRUE, TOKEN_VAR, TOKEN_WHILE,$/;"	e	enum:__anon0ffdc26f0103
Token	src/include/scanner.h	/^} Token;$/;"	t	typeref:struct:__anon0ffdc26f0208
TokenType	src/include/scanner.h	/^} TokenType;$/;"	t	typeref:enum:__anon0ffdc26f0103
VM	src/include/vm.h	/^} VM;$/;"	t	typeref:struct:__anon7d047e080108
Value	src/include/value.h	/^typedef double Value;$/;"	t	typeref:typename:double
ValueArray	src/include/value.h	/^} ValueArray;$/;"	t	typeref:struct:__anonbc0cfda20108
__anon0ffdc26f0103	src/include/scanner.h	/^typedef enum {$/;"	g
__anon0ffdc26f0208	src/include/scanner.h	/^typedef struct {$/;"	s
__anon166db71e0103	src/include/chunk.h	/^typedef enum {$/;"	g
__anon166db71e0208	src/include/chunk.h	/^typedef struct {$/;"	s
__anon169b52370108	src/scanner.c	/^typedef struct {$/;"	s	file:
__anon7d047e080108	src/include/vm.h	/^typedef struct {$/;"	s
__anon7d047e080203	src/include/vm.h	/^typedef enum {$/;"	g
__anonbc0cfda20108	src/include/value.h	/^typedef struct {$/;"	s
addConstant	src/chunk.c	/^int addConstant(Chunk* chunk, Value value) {$/;"	f	typeref:typename:int
advance	src/scanner.c	/^static char advance() {$/;"	f	typeref:typename:char	file:
capacity	src/include/chunk.h	/^    int capacity;$/;"	m	struct:__anon166db71e0208	typeref:typename:int
capacity	src/include/value.h	/^    int capacity;$/;"	m	struct:__anonbc0cfda20108	typeref:typename:int
chunk	src/include/vm.h	/^    Chunk* chunk;$/;"	m	struct:__anon7d047e080108	typeref:typename:Chunk *
clox_chunk_h	src/include/chunk.h	/^#define clox_chunk_h$/;"	d
clox_common_h	src/include/common.h	/^#define clox_common_h$/;"	d
clox_compiler_h	src/include/compiler.h	/^#define clox_compiler_h$/;"	d
clox_debug_h	src/include/debug.h	/^#define clox_debug_h$/;"	d
clox_memory_h	src/include/memory.h	/^#define clox_memory_h$/;"	d
clox_scanner_h	src/include/scanner.h	/^#define clox_scanner_h$/;"	d
clox_value_h	src/include/value.h	/^#define clox_value_h$/;"	d
clox_vm_h	src/include/vm.h	/^#define clox_vm_h$/;"	d
code	src/include/chunk.h	/^    uint8_t* code;$/;"	m	struct:__anon166db71e0208	typeref:typename:uint8_t *
compile	src/compiler.c	/^void compile(const char* source) {$/;"	f	typeref:typename:void
constantInstruction	src/debug.c	/^static int constantInstruction(const char* name, Chunk* chunk,$/;"	f	typeref:typename:int	file:
constants	src/include/chunk.h	/^    ValueArray constants;$/;"	m	struct:__anon166db71e0208	typeref:typename:ValueArray
count	src/include/chunk.h	/^    int count;$/;"	m	struct:__anon166db71e0208	typeref:typename:int
count	src/include/value.h	/^    int count;$/;"	m	struct:__anonbc0cfda20108	typeref:typename:int
current	src/scanner.c	/^    const char* current;$/;"	m	struct:__anon169b52370108	typeref:typename:const char *	file:
disassembleChunk	src/debug.c	/^void disassembleChunk(Chunk* chunk, const char* name) {$/;"	f	typeref:typename:void
disassembleInstruction	src/debug.c	/^int disassembleInstruction(Chunk* chunk, int offset) {$/;"	f	typeref:typename:int
errorToken	src/scanner.c	/^static Token errorToken(const char* message) {$/;"	f	typeref:typename:Token	file:
freeChunk	src/chunk.c	/^void freeChunk(Chunk* chunk) {$/;"	f	typeref:typename:void
freeVM	src/vm.c	/^void freeVM() {$/;"	f	typeref:typename:void
freeValueArray	src/value.c	/^void freeValueArray(ValueArray* array) {$/;"	f	typeref:typename:void
initChunk	src/chunk.c	/^void initChunk(Chunk* chunk) {$/;"	f	typeref:typename:void
initScanner	src/scanner.c	/^void initScanner(const char* source) {$/;"	f	typeref:typename:void
initVM	src/vm.c	/^void initVM() {$/;"	f	typeref:typename:void
initValueArray	src/value.c	/^void initValueArray(ValueArray* array) {$/;"	f	typeref:typename:void
interpret	src/vm.c	/^InterpretResult interpret(const char* source) {$/;"	f	typeref:typename:InterpretResult
ip	src/include/vm.h	/^    uint8_t* ip; \/\/ 'instruction pointer'$/;"	m	struct:__anon7d047e080108	typeref:typename:uint8_t *
isAtEnd	src/scanner.c	/^static bool isAtEnd() {$/;"	f	typeref:typename:bool	file:
isDigit	src/scanner.c	/^static bool isDigit(char c) {$/;"	f	typeref:typename:bool	file:
length	src/include/scanner.h	/^    int length;$/;"	m	struct:__anon0ffdc26f0208	typeref:typename:int
line	src/include/scanner.h	/^    int line;$/;"	m	struct:__anon0ffdc26f0208	typeref:typename:int
line	src/scanner.c	/^    int line;$/;"	m	struct:__anon169b52370108	typeref:typename:int	file:
lines	src/include/chunk.h	/^    int* lines;$/;"	m	struct:__anon166db71e0208	typeref:typename:int *
main	src/main.c	/^int main(int argc, const char* argv[]) {$/;"	f	typeref:typename:int
makeToken	src/scanner.c	/^static Token makeToken(TokenType type) {$/;"	f	typeref:typename:Token	file:
match	src/scanner.c	/^static bool match(char expected) {$/;"	f	typeref:typename:bool	file:
number	src/scanner.c	/^static Token number() {$/;"	f	typeref:typename:Token	file:
peek	src/scanner.c	/^static char peek() {$/;"	f	typeref:typename:char	file:
peekNext	src/scanner.c	/^static char peekNext() {$/;"	f	typeref:typename:char	file:
pop	src/vm.c	/^Value pop() {$/;"	f	typeref:typename:Value
printValue	src/value.c	/^void printValue(Value value) {$/;"	f	typeref:typename:void
push	src/vm.c	/^void push(Value value) {$/;"	f	typeref:typename:void
readFile	src/main.c	/^static char* readFile(const char* path) {$/;"	f	typeref:typename:char *	file:
reallocate	src/memory.c	/^void* reallocate(void* pointer, size_t oldSize, size_t newSize) {$/;"	f	typeref:typename:void *
repl	src/main.c	/^static void repl() {$/;"	f	typeref:typename:void	file:
resetStack	src/vm.c	/^static void resetStack() {$/;"	f	typeref:typename:void	file:
run	src/vm.c	/^static InterpretResult run() {$/;"	f	typeref:typename:InterpretResult	file:
runFile	src/main.c	/^static void runFile(const char* path) {$/;"	f	typeref:typename:void	file:
scanToken	src/scanner.c	/^Token scanToken() {$/;"	f	typeref:typename:Token
scanner	src/scanner.c	/^Scanner scanner;$/;"	v	typeref:typename:Scanner
simpleInstruction	src/debug.c	/^static int simpleInstruction(const char* name, int offset) {$/;"	f	typeref:typename:int	file:
skipWhitespace	src/scanner.c	/^static void skipWhitespace() {$/;"	f	typeref:typename:void	file:
stack	src/include/vm.h	/^    Value stack[STACK_MAX];$/;"	m	struct:__anon7d047e080108	typeref:typename:Value[]
stackTop	src/include/vm.h	/^    Value* stackTop;$/;"	m	struct:__anon7d047e080108	typeref:typename:Value *
start	src/include/scanner.h	/^    const char* start;$/;"	m	struct:__anon0ffdc26f0208	typeref:typename:const char *
start	src/scanner.c	/^    const char* start;$/;"	m	struct:__anon169b52370108	typeref:typename:const char *	file:
string	src/scanner.c	/^static Token string() {$/;"	f	typeref:typename:Token	file:
type	src/include/scanner.h	/^    TokenType type;$/;"	m	struct:__anon0ffdc26f0208	typeref:typename:TokenType
values	src/include/value.h	/^    Value* values;$/;"	m	struct:__anonbc0cfda20108	typeref:typename:Value *
vm	src/vm.c	/^VM vm;$/;"	v	typeref:typename:VM
writeChunk	src/chunk.c	/^void writeChunk(Chunk* chunk, uint8_t byte, int line) {$/;"	f	typeref:typename:void
writeValueArray	src/value.c	/^void writeValueArray(ValueArray* array, Value value) {$/;"	f	typeref:typename:void
